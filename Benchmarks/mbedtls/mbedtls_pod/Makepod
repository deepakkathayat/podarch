TOOLCHAIN_DIR = ../../../Toolchain
LIBDIR        = library/libmbedtls.a
INCLUDE       = -I $(TOOLCHAIN_DIR)/

GLIBCDIR   = ../../../eglibc-2.19/install/lib
STARTFILES = $(GLIBCDIR)/crt1.o $(GLIBCDIR)/crti.o `gcc --print-file-name=crtbegin.o`
ENDFILES   = `gcc --print-file-name=crtend.o` $(GLIBCDIR)/crtn.o
LIBGROUP   = -Wl,--start-group $(LIBDIR) $(GLIBCDIR)/libc.a -lgcc -lgcc_eh -Wl,--end-group
WRAP       = -Wl,--wrap=open,--wrap=fopen,--wrap=read,--wrap=nanosleep,--wrap=__access,--wrap=link,--wrap=unlink,--wrap=readlink,--wrap=__open,--wrap=__readlink,--wrap=uname,--wrap=write,--wrap=access,--wrap=getrusage,--wrap=chdir,--wrap=creat

LDFLAGS = $(INCLUDE) -nostdlib -nostartfiles -static -T $(TOOLCHAIN_DIR)/page_aligner $(WRAP)


PROGRAMS =	programs/aes/aescrypt2		programs/aes/crypt_and_hash	\
	programs/hash/hello		programs/hash/generic_sum	\
	programs/hash/md5sum		programs/hash/sha1sum		\
	programs/hash/sha2sum		programs/pkey/dh_client		\
	programs/pkey/dh_genprime	programs/pkey/dh_server		\
	programs/pkey/gen_key						\
	programs/pkey/key_app		programs/pkey/key_app_writer	\
	programs/pkey/mpi_demo		programs/pkey/pk_decrypt		\
	programs/pkey/pk_encrypt		programs/pkey/pk_sign		\
	programs/pkey/pk_verify		programs/pkey/rsa_genkey		\
	programs/pkey/rsa_decrypt	programs/pkey/rsa_encrypt	\
	programs/pkey/rsa_sign		programs/pkey/rsa_verify		\
	programs/pkey/rsa_sign_pss	programs/pkey/rsa_verify_pss	\
	programs/ssl/ssl_client1		programs/ssl/ssl_client2		\
	programs/ssl/ssl_server		programs/ssl/ssl_server2		\
	programs/ssl/ssl_fork_server	programs/ssl/mini_client		\
	programs/ssl/ssl_mail_client	programs/random/gen_entropy	\
	programs/random/gen_random_havege				\
	programs/random/gen_random_ctr_drbg				\
	programs/test/ssl_cert_test	programs/test/benchmark		\
	programs/test/selftest		programs/test/ssl_test		\
	programs/util/pem2der		programs/util/strerror		\
	programs/x509/cert_app		programs/x509/crl_app		\
	programs/x509/cert_req

TESTS = tests/test_suite_aes.ecb	tests/test_suite_aes.cbc	\
	tests/test_suite_aes.cfb	tests/test_suite_aes.rest	\
	tests/test_suite_arc4		tests/test_suite_asn1write	\
	tests/test_suite_base64	tests/test_suite_blowfish	\
	tests/test_suite_camellia	tests/test_suite_ccm		\
	tests/test_suite_cipher.aes					\
	tests/test_suite_cipher.arc4	tests/test_suite_cipher.ccm	\
	tests/test_suite_cipher.gcm					\
	tests/test_suite_cipher.blowfish				\
	tests/test_suite_cipher.camellia				\
	tests/test_suite_cipher.des	tests/test_suite_cipher.null	\
	tests/test_suite_cipher.padding				\
	tests/test_suite_ctr_drbg	tests/test_suite_debug	\
	tests/test_suite_des		tests/test_suite_dhm		\
	tests/test_suite_ecdh		tests/test_suite_ecdsa	\
	tests/test_suite_ecp						\
	tests/test_suite_error	tests/test_suite_entropy	\
	tests/test_suite_gcm.aes128_de				\
	tests/test_suite_gcm.aes192_de				\
	tests/test_suite_gcm.aes256_de				\
	tests/test_suite_gcm.aes128_en				\
	tests/test_suite_gcm.aes192_en				\
	tests/test_suite_gcm.aes256_en				\
	tests/test_suite_gcm.camellia	tests/test_suite_hmac_shax	\
	tests/test_suite_hmac_drbg.misc				\
	tests/test_suite_hmac_drbg.no_reseed				\
	tests/test_suite_hmac_drbg.nopr				\
	tests/test_suite_hmac_drbg.pr					\
	tests/test_suite_md		tests/test_suite_mdx		\
	tests/test_suite_memory_buffer_alloc				\
	tests/test_suite_mpi		tests/test_suite_pbkdf2	\
	tests/test_suite_pem						\
	tests/test_suite_pkcs1_v21	tests/test_suite_pkcs5	\
	tests/test_suite_pkparse	tests/test_suite_pkwrite	\
	tests/test_suite_pk						\
	tests/test_suite_rsa		tests/test_suite_shax		\
	tests/test_suite_x509parse	tests/test_suite_x509write	\
	tests/test_suite_xtea		tests/test_suite_version

.SILENT:

pod:
	$(MAKE)
	
	for i in $(PROGRAMS);					\
	do										\
		$(TOOLCHAIN_DIR)/get_pod_int -i $${i} -o some_`basename $${i}` -k $(TOOLCHAIN_DIR)/key -c $(TOOLCHAIN_DIR)/cpu > /tmp/get_pod_intc2;	\
		ld -r -b binary -o pod_intc.o podintc;	\
		objcopy --rename-section .data=.intc,alloc,load,readonly,data,contents pod_intc.o pod_intc.o;	\
		ld -r -b binary -o pod_intd.o podintd;	\
		objcopy --rename-section .data=.intd,alloc,load,data,contents pod_intd.o pod_intd.o;	\
		ld -r -b binary -o pod_ints.o podints;	\
		objcopy --rename-section .data=.ints,alloc,load,data,contents pod_ints.o pod_ints.o;	\
		ld -r -b binary -o pod_intbss.o podintbss;	\
		objcopy --rename-section .data=.intbss,alloc,load,data,contents pod_intbss.o pod_intbss.o;	\
		ld -r -b binary -o pod_intmmap.o podintmmap;	\
		objcopy --rename-section .data=.intmmap,alloc,load,data,contents pod_intmmap.o pod_intmmap.o;	\
		ld -r -b binary -o pod_intbrk.o podintbrk;	\
		objcopy --rename-section .data=.intbrk,alloc,load,data,contents pod_intbrk.o pod_intbrk.o;	\
		gcc $(LDFLAGS) -o $${i} $(STARTFILES) $${i}.o pod_intc.o pod_intd.o pod_ints.o pod_intbss.o pod_intbrk.o pod_intmmap.o $(LIBGROUP) $(ENDFILES); \
		$(TOOLCHAIN_DIR)/makepod -i $${i} -o $${i}_pod -k $(TOOLCHAIN_DIR)/key -c $(TOOLCHAIN_DIR)/cpu > /tmp/makepod2;	\
	done;

	for i in $(TESTS);					\
	do										\
		$(TOOLCHAIN_DIR)/get_pod_int -i $${i} -o some_`basename $${i}` -k $(TOOLCHAIN_DIR)/key -c $(TOOLCHAIN_DIR)/cpu > /tmp/get_pod_intc2;	\
		ld -r -b binary -o pod_intc.o podintc;	\
		objcopy --rename-section .data=.intc,alloc,load,readonly,data,contents pod_intc.o pod_intc.o;	\
		ld -r -b binary -o pod_intd.o podintd;	\
		objcopy --rename-section .data=.intd,alloc,load,data,contents pod_intd.o pod_intd.o;	\
		ld -r -b binary -o pod_ints.o podints;	\
		objcopy --rename-section .data=.ints,alloc,load,data,contents pod_ints.o pod_ints.o;	\
		ld -r -b binary -o pod_intbss.o podintbss;	\
		objcopy --rename-section .data=.intbss,alloc,load,data,contents pod_intbss.o pod_intbss.o;	\
		ld -r -b binary -o pod_intmmap.o podintmmap;	\
		objcopy --rename-section .data=.intmmap,alloc,load,data,contents pod_intmmap.o pod_intmmap.o;	\
		ld -r -b binary -o pod_intbrk.o podintbrk;	\
		objcopy --rename-section .data=.intbrk,alloc,load,data,contents pod_intbrk.o pod_intbrk.o;	\
		gcc $(LDFLAGS) -o $${i} $(STARTFILES) $${i}.o pod_intc.o pod_intd.o pod_ints.o pod_intbss.o pod_intbrk.o pod_intmmap.o $(LIBGROUP) $(ENDFILES); \
		$(TOOLCHAIN_DIR)/makepod -i $${i} -o $${i}_pod -k $(TOOLCHAIN_DIR)/key -c $(TOOLCHAIN_DIR)/cpu > /tmp/makepod2;	\
	done;

	rm -rf some_* pod*;

clean:
	$(MAKE) clean
	rm -rf some_* pod* tests/*.o programs/aes/*.o programs/hash/*.o programs/pkey/*.o programs/random/*.o programs/ssl/*.o programs/test/*.o programs/util/*.o programs/x509/*.o programs/aes/*_pod programs/hash/*_pod programs/pkey/*_pod programs/random/*_pod programs/ssl/*_pod programs/test/*_pod programs/util/*_pod programs/x509/*_pod tests/*_pod
